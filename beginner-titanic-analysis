{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#libraries that i need them.\n",
    "import pandas as pd \n",
    "import numpy as np \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_titanic = pd.read_csv('train.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>879</th>\n",
       "      <td>880</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Potter, Mrs. Thomas Jr (Lily Alexenia Wilson)</td>\n",
       "      <td>female</td>\n",
       "      <td>56.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>11767</td>\n",
       "      <td>83.1583</td>\n",
       "      <td>C50</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>880</th>\n",
       "      <td>881</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Shelley, Mrs. William (Imanita Parrish Hall)</td>\n",
       "      <td>female</td>\n",
       "      <td>25.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>230433</td>\n",
       "      <td>26.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>881</th>\n",
       "      <td>882</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Markun, Mr. Johann</td>\n",
       "      <td>male</td>\n",
       "      <td>33.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>349257</td>\n",
       "      <td>7.8958</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>882</th>\n",
       "      <td>883</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Dahlberg, Miss. Gerda Ulrika</td>\n",
       "      <td>female</td>\n",
       "      <td>22.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7552</td>\n",
       "      <td>10.5167</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>883</th>\n",
       "      <td>884</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Banfield, Mr. Frederick James</td>\n",
       "      <td>male</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>C.A./SOTON 34068</td>\n",
       "      <td>10.5000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>884</th>\n",
       "      <td>885</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Sutehall, Mr. Henry Jr</td>\n",
       "      <td>male</td>\n",
       "      <td>25.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>SOTON/OQ 392076</td>\n",
       "      <td>7.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>885</th>\n",
       "      <td>886</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Rice, Mrs. William (Margaret Norton)</td>\n",
       "      <td>female</td>\n",
       "      <td>39.0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>382652</td>\n",
       "      <td>29.1250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>887</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Montvila, Rev. Juozas</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>211536</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>888</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Graham, Miss. Margaret Edith</td>\n",
       "      <td>female</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>112053</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>B42</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>889</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>W./C. 6607</td>\n",
       "      <td>23.4500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>890</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Behr, Mr. Karl Howell</td>\n",
       "      <td>male</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>111369</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>C148</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>891</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Dooley, Mr. Patrick</td>\n",
       "      <td>male</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>370376</td>\n",
       "      <td>7.7500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass  \\\n",
       "879          880         1       1   \n",
       "880          881         1       2   \n",
       "881          882         0       3   \n",
       "882          883         0       3   \n",
       "883          884         0       2   \n",
       "884          885         0       3   \n",
       "885          886         0       3   \n",
       "886          887         0       2   \n",
       "887          888         1       1   \n",
       "888          889         0       3   \n",
       "889          890         1       1   \n",
       "890          891         0       3   \n",
       "\n",
       "                                              Name     Sex   Age  SibSp  \\\n",
       "879  Potter, Mrs. Thomas Jr (Lily Alexenia Wilson)  female  56.0      0   \n",
       "880   Shelley, Mrs. William (Imanita Parrish Hall)  female  25.0      0   \n",
       "881                             Markun, Mr. Johann    male  33.0      0   \n",
       "882                   Dahlberg, Miss. Gerda Ulrika  female  22.0      0   \n",
       "883                  Banfield, Mr. Frederick James    male  28.0      0   \n",
       "884                         Sutehall, Mr. Henry Jr    male  25.0      0   \n",
       "885           Rice, Mrs. William (Margaret Norton)  female  39.0      0   \n",
       "886                          Montvila, Rev. Juozas    male  27.0      0   \n",
       "887                   Graham, Miss. Margaret Edith  female  19.0      0   \n",
       "888       Johnston, Miss. Catherine Helen \"Carrie\"  female   NaN      1   \n",
       "889                          Behr, Mr. Karl Howell    male  26.0      0   \n",
       "890                            Dooley, Mr. Patrick    male  32.0      0   \n",
       "\n",
       "     Parch            Ticket     Fare Cabin Embarked  \n",
       "879      1             11767  83.1583   C50        C  \n",
       "880      1            230433  26.0000   NaN        S  \n",
       "881      0            349257   7.8958   NaN        S  \n",
       "882      0              7552  10.5167   NaN        S  \n",
       "883      0  C.A./SOTON 34068  10.5000   NaN        S  \n",
       "884      0   SOTON/OQ 392076   7.0500   NaN        S  \n",
       "885      5            382652  29.1250   NaN        Q  \n",
       "886      0            211536  13.0000   NaN        S  \n",
       "887      0            112053  30.0000   B42        S  \n",
       "888      2        W./C. 6607  23.4500   NaN        S  \n",
       "889      0            111369  30.0000  C148        C  \n",
       "890      0            370376   7.7500   NaN        Q  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_titanic.tail(12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    object \n",
      " 5   Age          714 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        204 non-null    object \n",
      " 11  Embarked     889 non-null    object \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.7+ KB\n"
     ]
    }
   ],
   "source": [
    "#shows information about the data frame you have just created for the Titanic dataset \n",
    "df_titanic.info()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Questions:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1\n",
    "Please show all the information that belongs to the first five passengers. You should have 5\n",
    "rows each referring to a passenger, and the values of 12 features (columns) for each passenger."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Moran, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330877</td>\n",
       "      <td>8.4583</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>McCarthy, Mr. Timothy J</td>\n",
       "      <td>male</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>17463</td>\n",
       "      <td>51.8625</td>\n",
       "      <td>E46</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Palsson, Master. Gosta Leonard</td>\n",
       "      <td>male</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>349909</td>\n",
       "      <td>21.0750</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)</td>\n",
       "      <td>female</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>347742</td>\n",
       "      <td>11.1333</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Nasser, Mrs. Nicholas (Adele Achem)</td>\n",
       "      <td>female</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>237736</td>\n",
       "      <td>30.0708</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Sandstrom, Miss. Marguerite Rut</td>\n",
       "      <td>female</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>PP 9549</td>\n",
       "      <td>16.7000</td>\n",
       "      <td>G6</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Bonnell, Miss. Elizabeth</td>\n",
       "      <td>female</td>\n",
       "      <td>58.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>113783</td>\n",
       "      <td>26.5500</td>\n",
       "      <td>C103</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    PassengerId  Survived  Pclass  \\\n",
       "0             1         0       3   \n",
       "1             2         1       1   \n",
       "2             3         1       3   \n",
       "3             4         1       1   \n",
       "4             5         0       3   \n",
       "5             6         0       3   \n",
       "6             7         0       1   \n",
       "7             8         0       3   \n",
       "8             9         1       3   \n",
       "9            10         1       2   \n",
       "10           11         1       3   \n",
       "11           12         1       1   \n",
       "\n",
       "                                                 Name     Sex   Age  SibSp  \\\n",
       "0                             Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1   Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                              Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3        Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                            Allen, Mr. William Henry    male  35.0      0   \n",
       "5                                    Moran, Mr. James    male   NaN      0   \n",
       "6                             McCarthy, Mr. Timothy J    male  54.0      0   \n",
       "7                      Palsson, Master. Gosta Leonard    male   2.0      3   \n",
       "8   Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)  female  27.0      0   \n",
       "9                 Nasser, Mrs. Nicholas (Adele Achem)  female  14.0      1   \n",
       "10                    Sandstrom, Miss. Marguerite Rut  female   4.0      1   \n",
       "11                           Bonnell, Miss. Elizabeth  female  58.0      0   \n",
       "\n",
       "    Parch            Ticket     Fare Cabin Embarked  \n",
       "0       0         A/5 21171   7.2500   NaN        S  \n",
       "1       0          PC 17599  71.2833   C85        C  \n",
       "2       0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3       0            113803  53.1000  C123        S  \n",
       "4       0            373450   8.0500   NaN        S  \n",
       "5       0            330877   8.4583   NaN        Q  \n",
       "6       0             17463  51.8625   E46        S  \n",
       "7       1            349909  21.0750   NaN        S  \n",
       "8       2            347742  11.1333   NaN        S  \n",
       "9       0            237736  30.0708   NaN        C  \n",
       "10      1           PP 9549  16.7000    G6        S  \n",
       "11      0            113783  26.5500  C103        S  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Q1\n",
    "df_titanic.head(12)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "# 2. \n",
    "Please show the size and dimension of the dataset: (number of passangers, number of\n",
    "features). Do not forget to write what the output of your script refers to."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "size of the dataset :  10692\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(891, 12)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#size of the dataset(that is to say number of cell in dataset)\n",
    "print('size of the dataset : ',df_titanic.size)\n",
    "\n",
    "#dimension of the dataset -> (numberofpassenger, numberoffeatures)\n",
    "df_titanic.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3.\n",
    "Please check how many missing values there are in the dataset for each feature column.\n",
    "Missing values will have a null value (NaN). Do not forget to write which classes have missing\n",
    "values, and how many missing values in the comments."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId      0\n",
       "Survived         0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "Age            177\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Ticket           0\n",
       "Fare             0\n",
       "Cabin          687\n",
       "Embarked         2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#NaN values in the dataset for each feature column\n",
    "df_titanic.isna().sum()\n",
    "\n",
    "#Cabin, Age, Embarken have 687, 177, 2 NaN value, respectively."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4. \n",
    "Please create a pie chart which shows the percentage of passengers that survived and the\n",
    "percentage of the passengers that did not survive. Explain in your comments if more people\n",
    "have survived or did not survive."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#According to pie chart, there is too many dead people. I thought that if 38.4 percentage of passangers could\n",
    "#survive, why other people did not. This situation may be class distinction or omission. \n",
    "#If more people could survived, titanic may be legend.\n",
    "\n",
    "dead = df_titanic.groupby('Survived')['Sex'].count()[0]\n",
    "survived = df_titanic.groupby('Survived')['Sex'].count()[1]\n",
    "\n",
    "label = 'unsurvived', 'survived'\n",
    "ratio = [dead, survived]\n",
    "explode =(0, 0.1)\n",
    "\n",
    "fig1 = plt.figure()\n",
    "ax1 = fig1.add_subplot(1,1,1)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5.\n",
    "Please create a bar chart that shows the number of female passengers and the total number\n",
    "of male passengers (You should have two bars referring to female and male)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#there were 577 male and 314 female.\n",
    "fig2 = plt.figure()\n",
    "ax2 = fig2.add_subplot(1,2,1)\n",
    "male=df_titanic.groupby('Sex')['Survived'].count()[1]\n",
    "female=df_titanic.groupby('Sex')['Survived'].count()[0]\n",
    "ax2.bar(['Female','Male'], [female, male] )\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 6. \n",
    "Please create a bar chart that shows the number of females and males who survived and who\n",
    "did not survive. (You should have four bars referring females who survived and didn’t survive\n",
    "and males who survived and didn’t survive)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([0, 1, 2, 3],\n",
       " [Text(0, 0, ''), Text(0, 0, ''), Text(0, 0, ''), Text(0, 0, '')])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "result = df_titanic.groupby(['Survived','Sex'])['PassengerId'].count()\n",
    "\n",
    "\n",
    "fig3 = plt.figure()\n",
    "ax3 = fig3.add_subplot(1,2,1)\n",
    "ax3.bar(['Female(Did not survive)','Female(Survived)','Male(Did not survive)', 'Male(Survived)'], \n",
    "       [result[0]['female'], result[1]['female'], result[0]['male'], result[1]['male']],\n",
    "        align='center'\n",
    "       )\n",
    "ax3.set_ylabel('number of people')\n",
    "plt.xticks(rotation='vertical')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 7.\n",
    "Please create a bar chart that shows the surival rates of females and males. (You should have\n",
    "two bars referring to female and male) Explain your observations in your comments, are there\n",
    "more female or male passengers in total? Did more females or males survive? What might be\n",
    "the reason?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "233"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#There were too many dead. Also there is an interesting situation. Nearly %82 of male was dead. This rates really \n",
    "#high. Besides, nearly %25 of female was dead. These two rates are absolutely different each other. \n",
    "#Beginning, there were more male passengers in total. After shipwreck, number of surviving female was more than male.\n",
    "#It might have a reasons. I think, reason is that males were too drunk. Generally in universe, males drink alcohol\n",
    "#more than female. That is my little reason.\n",
    "\n",
    "\n",
    "result = df_titanic.groupby(['Survived','Sex'])['PassengerId'].count()\n",
    "\n",
    "male_rates = result[1]['male'] / male\n",
    "female_rates = result[1]['female'] / female\n",
    "\n",
    "fig4 = plt.figure()\n",
    "ax4 = fig4.add_subplot(1,1,1)\n",
    "ax4.bar(['Female(Survived)','Male(Survived)'], \n",
    "       [female_rates, male_rates],\n",
    "        align='center'\n",
    "       )\n",
    "\n",
    "ax4.set_ylabel('survival rates of females and males')\n",
    "# plt.xticks(rotation='vertical')\n",
    "result[1]['male'] \n",
    "result[1]['female']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 8. \n",
    "Please create a cross table as shown below (x will be computed and included in your answer).\n",
    "The cross table makes it possible to get information about how many people in the 2nd class\n",
    "have survived etc. Please indicate which class has the most number of survivors? Which class\n",
    "has the lowest number of survivors? Manually compute the rate for each class: number of\n",
    "survivors in that class/all passengers in that class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "first class rates =  0.6296296296296297\n",
      "second class rates =  0.47282608695652173\n",
      "third class rates =  0.24236252545824846\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Survived</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>80</td>\n",
       "      <td>136</td>\n",
       "      <td>216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>97</td>\n",
       "      <td>87</td>\n",
       "      <td>184</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>372</td>\n",
       "      <td>119</td>\n",
       "      <td>491</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <td>549</td>\n",
       "      <td>342</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Survived    0    1  All\n",
       "Pclass                 \n",
       "1          80  136  216\n",
       "2          97   87  184\n",
       "3         372  119  491\n",
       "All       549  342  891"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#87 people have survived in 2nd class. \n",
    "# 1st class has the most number of survivors. \n",
    "# 2nd class has the lowest number of survivors.\n",
    "\n",
    "pivot_1 = df_titanic.pivot_table(index='Pclass',columns=[\"Survived\"], aggfunc=\"count\", margins=True, values='PassengerId')\n",
    "\n",
    "first_class_rates = pivot_1.loc[1][1] / pivot_1.loc[1]['All']\n",
    "second_class_rates = pivot_1.loc[2][1] / pivot_1.loc[2]['All']\n",
    "third_class_rates = pivot_1.loc[3][1]/ pivot_1.loc[3]['All']\n",
    "\n",
    "\n",
    "print(\"first class rates = \" , first_class_rates)\n",
    "print(\"second class rates = \" , second_class_rates)\n",
    "print(\"third class rates = \" , third_class_rates)\n",
    "pivot_1\n",
    "\n",
    "# df_titanic.groupby(by=['Pclass', 'Survived']).count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>887</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Montvila, Rev. Juozas</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>211536</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>888</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Graham, Miss. Margaret Edith</td>\n",
       "      <td>female</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>112053</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>B42</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>889</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>W./C. 6607</td>\n",
       "      <td>23.4500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>890</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Behr, Mr. Karl Howell</td>\n",
       "      <td>male</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>111369</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>C148</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>891</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Dooley, Mr. Patrick</td>\n",
       "      <td>male</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>370376</td>\n",
       "      <td>7.7500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass  \\\n",
       "0              1         0       3   \n",
       "1              2         1       1   \n",
       "2              3         1       3   \n",
       "3              4         1       1   \n",
       "4              5         0       3   \n",
       "..           ...       ...     ...   \n",
       "886          887         0       2   \n",
       "887          888         1       1   \n",
       "888          889         0       3   \n",
       "889          890         1       1   \n",
       "890          891         0       3   \n",
       "\n",
       "                                                  Name     Sex   Age  SibSp  \\\n",
       "0                              Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1    Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                               Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3         Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                             Allen, Mr. William Henry    male  35.0      0   \n",
       "..                                                 ...     ...   ...    ...   \n",
       "886                              Montvila, Rev. Juozas    male  27.0      0   \n",
       "887                       Graham, Miss. Margaret Edith  female  19.0      0   \n",
       "888           Johnston, Miss. Catherine Helen \"Carrie\"  female   NaN      1   \n",
       "889                              Behr, Mr. Karl Howell    male  26.0      0   \n",
       "890                                Dooley, Mr. Patrick    male  32.0      0   \n",
       "\n",
       "     Parch            Ticket     Fare Cabin Embarked  \n",
       "0        0         A/5 21171   7.2500   NaN        S  \n",
       "1        0          PC 17599  71.2833   C85        C  \n",
       "2        0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3        0            113803  53.1000  C123        S  \n",
       "4        0            373450   8.0500   NaN        S  \n",
       "..     ...               ...      ...   ...      ...  \n",
       "886      0            211536  13.0000   NaN        S  \n",
       "887      0            112053  30.0000   B42        S  \n",
       "888      2        W./C. 6607  23.4500   NaN        S  \n",
       "889      0            111369  30.0000  C148        C  \n",
       "890      0            370376   7.7500   NaN        Q  \n",
       "\n",
       "[891 rows x 12 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_titanic"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 9. \n",
    "Please create a bar chart that shows the number of passengers who survived and who didn’t\n",
    "survive for each class. (You should have 6 bars in total)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "80 97 372\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig5 = plt.figure()\n",
    "ax5 = fig5.add_subplot(1,1,1)\n",
    "ax5.bar(['1st class(Survived)', '1st class(dead)', \n",
    "         '2nd class(Survived)', '2nd class(dead)', \n",
    "         '3rd class(Survived)', '3rd class(dead)'], \n",
    "         [pivot_1[1][1], pivot_1[0][1], \n",
    "            pivot_1[1][2], pivot_1[0][2],\n",
    "            pivot_1[1][3], pivot_1[0][3]],\n",
    "                align='center'\n",
    "       )\n",
    "\n",
    "ax5.set_ylabel('number of people')\n",
    "plt.xticks(rotation='vertical')\n",
    "print(pivot_1[0][1],pivot_1[0][2],pivot_1[0][3])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 10. \n",
    "Please create a cross table as shown below (x will be computed and included in your answer).\n",
    "(Simiar to Q8 but gender information is added). Explain which gender had a higher survival\n",
    "rate? What might be the reason?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pclass</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <th>Survived</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">female</th>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>72</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>91</td>\n",
       "      <td>70</td>\n",
       "      <td>72</td>\n",
       "      <td>233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">male</th>\n",
       "      <th>0</th>\n",
       "      <td>77</td>\n",
       "      <td>91</td>\n",
       "      <td>300</td>\n",
       "      <td>468</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>45</td>\n",
       "      <td>17</td>\n",
       "      <td>47</td>\n",
       "      <td>109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <th></th>\n",
       "      <td>216</td>\n",
       "      <td>184</td>\n",
       "      <td>491</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Pclass             1    2    3  All\n",
       "Sex    Survived                    \n",
       "female 0           3    6   72   81\n",
       "       1          91   70   72  233\n",
       "male   0          77   91  300  468\n",
       "       1          45   17   47  109\n",
       "All              216  184  491  891"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# female has higher survival rate in all class  \n",
    "\n",
    "pivot_2 = df_titanic.pivot_table(index=['Sex','Survived'],columns=[\"Pclass\"], aggfunc=\"count\", \n",
    "                                 margins=True, values='PassengerId')\n",
    "\n",
    "pivot_2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 11.\n",
    "What is the age of the olders passenger?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "80.0"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_titanic['Age'].max()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 12.\n",
    "What is the age of the youngest passenger?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.42"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_titanic['Age'].min()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 13.\n",
    "What is the average age of the passengers?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "29.69911764705882"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_titanic['Age'].mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 14.\n",
    "Please plot the histogram that shows the age distribution of the passengers who survived.\n",
    "(You should have 10 bins for the range of the ages.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/yazilimci/.local/lib/python3.8/site-packages/numpy/lib/histograms.py:839: RuntimeWarning: invalid value encountered in greater_equal\n",
      "  keep = (tmp_a >= first_edge)\n",
      "/home/yazilimci/.local/lib/python3.8/site-packages/numpy/lib/histograms.py:840: RuntimeWarning: invalid value encountered in less_equal\n",
      "  keep &= (tmp_a <= last_edge)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(array([36., 19., 63., 65., 52., 24., 21.,  9.,  0.,  1.]),\n",
       " array([ 0.42 ,  8.378, 16.336, 24.294, 32.252, 40.21 , 48.168, 56.126,\n",
       "        64.084, 72.042, 80.   ]),\n",
       " <BarContainer object of 10 artists>)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df_titanic[df_titanic['Survived']==1]['Age'], bins=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 15.\n",
    "Please plot the histogram that shows the age distibution of the passengers who didn’t survive.\n",
    "(You should have 10 bins for the range of the ages.)\n",
    "Please explain your findings relating the Q14 and Q15 in writing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/yazilimci/.local/lib/python3.8/site-packages/numpy/lib/histograms.py:839: RuntimeWarning: invalid value encountered in greater_equal\n",
      "  keep = (tmp_a >= first_edge)\n",
      "/home/yazilimci/.local/lib/python3.8/site-packages/numpy/lib/histograms.py:840: RuntimeWarning: invalid value encountered in less_equal\n",
      "  keep &= (tmp_a <= last_edge)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(array([ 18.,  16.,  99., 110.,  64.,  45.,  38.,  15.,  13.,   6.]),\n",
       " array([ 1. ,  8.3, 15.6, 22.9, 30.2, 37.5, 44.8, 52.1, 59.4, 66.7, 74. ]),\n",
       " <BarContainer object of 10 artists>)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#My observations are that;\n",
    "#Under ten years old people are...\n",
    "plt.hist(df_titanic[df_titanic['Survived']==0]['Age'], bins=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 16.\n",
    "How much is the the lowest fare?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_titanic['Fare'].min()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 17.\n",
    "How much is the highest fare?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "512.3292"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_titanic['Fare'].max()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 18.\n",
    "How much is the average fare?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "32.204207968574636"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_titanic['Fare'].mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 19.\n",
    "Please plot the histogram that shows the distribution of passengers according to the fare they\n",
    "paid. (You should have 10 bins for the range of the ages.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([732., 106.,  31.,   2.,  11.,   6.,   0.,   0.,   0.,   3.]),\n",
       " array([  0.     ,  51.23292, 102.46584, 153.69876, 204.93168, 256.1646 ,\n",
       "        307.39752, 358.63044, 409.86336, 461.09628, 512.3292 ]),\n",
       " <BarContainer object of 10 artists>)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df_titanic['Fare'],bins=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 20.\n",
    "Are there any children under the age of 10 traveling without their parents? What might this\n",
    "indicate?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>777</th>\n",
       "      <td>778</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Emanuel, Miss. Virginia Ethel</td>\n",
       "      <td>female</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>364516</td>\n",
       "      <td>12.475</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass                           Name     Sex  \\\n",
       "777          778         1       3  Emanuel, Miss. Virginia Ethel  female   \n",
       "\n",
       "     Age  SibSp  Parch  Ticket    Fare Cabin Embarked  \n",
       "777  5.0      0      0  364516  12.475   NaN        S  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_titanic.loc[(df_titanic['Age'] < 10) & (df_titanic['Parch'] == 0) ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5.0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11.0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12.0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13.0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14.0</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70.0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70.5</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71.0</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74.0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80.0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>73 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      PassengerId  Survived  Pclass  Name  Sex  SibSp  Parch  Ticket  Fare  \\\n",
       "Age                                                                          \n",
       "5.0             1         1       1     1    1      1      1       1     1   \n",
       "11.0            1         1       1     1    1      1      1       1     1   \n",
       "12.0            1         1       1     1    1      1      1       1     1   \n",
       "13.0            1         1       1     1    1      1      1       1     1   \n",
       "14.0            3         3       3     3    3      3      3       3     3   \n",
       "...           ...       ...     ...   ...  ...    ...    ...     ...   ...   \n",
       "70.0            1         1       1     1    1      1      1       1     1   \n",
       "70.5            1         1       1     1    1      1      1       1     1   \n",
       "71.0            2         2       2     2    2      2      2       2     2   \n",
       "74.0            1         1       1     1    1      1      1       1     1   \n",
       "80.0            1         1       1     1    1      1      1       1     1   \n",
       "\n",
       "      Cabin  Embarked  \n",
       "Age                    \n",
       "5.0       0         1  \n",
       "11.0      0         1  \n",
       "12.0      0         1  \n",
       "13.0      0         1  \n",
       "14.0      0         3  \n",
       "...     ...       ...  \n",
       "70.0      0         1  \n",
       "70.5      0         1  \n",
       "71.0      1         2  \n",
       "74.0      0         1  \n",
       "80.0      1         1  \n",
       "\n",
       "[73 rows x 11 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_titanic[df_titanic['Parch'] == 0].groupby('Age').count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 5, 3, 4, 6])"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_titanic['Parch'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
